8) Stock Exchange (The project)

The following application elements are to be implemented:
Exchange: The exchange is created automatically randomly:
- 5 to 10 randomly selected assets (shares) from the pool of 15 possible,
- random starting price of a stock in the range 1-1000 (e.g. USD),
The stock exchange operates continuously until it is stopped by the user. The stock exchange randomly changes the price 
of each share by a random value between 1-3 every 5 seconds. The share price cannot exceed $ 10,000 and cannot fall below $ 1.
User: can place orders on the exchange.
Order: contains the type of operation (buy / sell), number of shares purchased. The user can place any number of orders.
When the share price reaches the assumed level in the order, the given orders are executed automatically. If there were 
many orders waiting for a given share price, they are executed in the order in which the orders were placed.
Each transaction on the stock exchange triggers a change in the price of a given share (buy -> increase, sell -> decrease).
The price change should be proportional to the ratio of the number of shares bought or sold / the number of shares on the
stock exchange. Exact proportionality algorithm to be proposed by the student.

**************

stock starting
price change
check if any placed order can be executed
mind the order at which the orders were placed (time/ints?)
if executed, change price accordingly
repeat every 5 seconds

**************

Handle all possible errors with your own exceptions, e.g .:
- placing an order greater than the number of available shares
- the share price is not within the USD 1-1000 range
- providing an action type that does not exist

The implementation of the above is 20 points.

Additionally:
· Multithreaded implementation (one thread - Stock, and unlimited number of threads representing the users) (10 points)
· Graphical interface of the exchange and user (5 points)
· Real-time visualization of stock prices (5 points) - there are ready libraries for the charts.